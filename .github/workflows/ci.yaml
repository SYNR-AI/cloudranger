name: ci

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - reopened
      - synchronize

permissions:
  contents: write
  packages: write

jobs:
  test:
    strategy:
      matrix:
        go-version: ['1.20', '1.21', stable]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed # v5
        with:
          go-version: ${{ matrix.go-version }}

      - uses: golangci/golangci-lint-action@971e284b6050e8a5849b72094c50ab08da042db8 # v6

      - run: make lint
      - run: make test
      - run: make bench

  # only create a new tag/release on main builds:
  release:
    if: github.ref == 'refs/heads/main'
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - name: checkout code with full history (unshallow)
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0
          fetch-tags: true

      # only generate a new release if certain files change:
      - uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3
        id: filter
        with:
          filters: |
            app:
              - '**.go'
              - 'go.mod'
              - 'go.sum'

      - uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed # v5
        if: steps.filter.outputs.app == 'true'
        with:
          go-version-file: go.mod

      - name: install autotag binary
        if: steps.filter.outputs.app == 'true'
        run: |
          curl -sL https://git.io/autotag-install | sudo sh -s -- -b /usr/local/bin

      - name: increment tag and create release
        if: steps.filter.outputs.app == 'true'
        run: |
          set -eou pipefail

          new_version=$(autotag -vn)
          gh release create v"${new_version}" --target main --title "v${new_version}" --generate-notes
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
