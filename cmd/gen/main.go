package main

import (
	"io"
	"log"
	"os"

	"github.com/planetscale/cloudranger/cmd/gen/providers"
)

const header = `// Code generated by ./cmd/gen; DO NOT EDIT.
package cloudranger

import (
	"net"
)

type rangeEntry struct {
	net *net.IPNet
	info IPInfo
}

var cloudRanges = []rangeEntry{
`

const footer = `}`

func main() {
	out, err := os.Create("zz_generated.go")
	if err != nil {
		log.Fatal(err)
	}
	defer out.Close()

	_, err = io.WriteString(out, header)
	if err != nil {
		log.Fatal(err)
	}

	// AWS:
	// {&net.IPNet{IP: []byte{3, 2, 34, 0}, Mask: []byte{255, 255, 255, 192}}, IPInfo{cloud: "AWS", region: "af-south-1"}},
	{
		provider := providers.NewAWSProvider("data/aws-ip-ranges.json")
		if err := provider.Generate(out); err != nil {
			log.Fatal(err)
		}
	}

	// GCP
	// {&net.IPNet{IP: []byte{38, 0, 25, 0, 66, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, Mask: []byte{255, 255, 255, 255, 255, 240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}, IPInfo{cloud: "GCP", region: "us-west8"}},
	{
		provider := providers.NewGCPProvider("data/gcp-cloud.json")
		if err := provider.Generate(out); err != nil {
			log.Fatal(err)
		}
	}

	// Azure
	{
		provider := providers.NewAzureProvider("data/azure-ip-ranges.json")
		if err := provider.Generate(out); err != nil {
			log.Fatal(err)
		}
	}

	// Linode
	{
		provider := providers.NewLinodeProvider("data/linode-ip-ranges.csv")
		if err := provider.Generate(out); err != nil {
			log.Fatal(err)
		}
	}

	// Oracle
	{
		provider := providers.NewOracleProvider("data/oracle-ip-ranges.json")
		if err := provider.Generate(out); err != nil {
			log.Fatal(err)
		}
	}

	// Cloudflare
	{
		provider := providers.NewCloudflareProvider("data/cloudflare-ips-v4.txt")
		if err := provider.Generate(out); err != nil {
			log.Fatal(err)
		}
	}

	// Cloudflare IPv6
	{
		provider := providers.NewCloudflareIPv6Provider("data/cloudflare-ips-v6.txt")
		if err := provider.Generate(out); err != nil {
			log.Fatal(err)
		}
	}

	// Fastly
	{
		provider := providers.NewFastlyProvider("data/fastly-ip-ranges.json")
		if err := provider.Generate(out); err != nil {
			log.Fatal(err)
		}
	}

	// DigitalOcean
	{
		provider := providers.NewDigitalOceanProvider("data/digitalocean-ip-ranges.csv")
		if err := provider.Generate(out); err != nil {
			log.Fatal(err)
		}
	}

	_, err = io.WriteString(out, footer)
	if err != nil {
		log.Fatal(err)
	}
}
